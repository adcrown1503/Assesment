@model Assesment.Models.WrapperViewEditProject

@{
    ViewBag.Title = "Edit";
}

<style>
    table {
        width: 100%;
        margin: 20px 0;
        border-collapse: collapse;
    }

    table, th, td {
        border: 1px solid #cdcdcd;
    }

        table th, table td {
            padding: 5px;
            text-align: left;
        }
</style>
<form>

    <div class="form-group">
        <label for="txtProjectId">Project Id</label>
        <input type="text" class="form-control" id="txtProjectId" value=@Model.dbview[0].id>
    </div>
    <div class="form-group">
        <label for="txtProjectName">Project Name</label>
        <input type="text" class="form-control" id="txtProjectName" value="@Model.dbview[0].name">
    </div>
    <div class="form-group">
        <label for="txtAssesmentDate">Assesment Date</label>
        <input type="text" class="form-control" id="txtAssesmentDate" value="@Model.dbview[0].assesmentDate">
    </div>
    <div class="form-group">
        <label for="txtDesiredDate">Desired Release Date</label>
        <input type="text" class="form-control" id="txtDesiredDate" value="@Model.dbview[0].desiredReleaseDate">
    </div>
    <div class="form-group">
        <label>Impact Type</label>


        @Html.DropDownListFor(model => model.project.impactType, new List<SelectListItem>
            {
                        new SelectListItem {Text="None",Value="None"},
                        new SelectListItem {Text="Small",Value="Small"} ,
                        new SelectListItem {Text="Medium",Value="Medium"},
                        new SelectListItem {Text="Large",Value="Large"},
                        new SelectListItem {Text="Very Large",Value="Very Large"}
            })

        @*<select id="txtImpactType">

                <option value="None">None</ option >
                <option value="Small">Small</option>
                <option value="Medium">Medium</option>
                <option value="Large">Large</option>
                <option value="Very Large">Very Large</option>
            </select>*@
    </div>
    <div class="form-group">
        <label for="txtAssumption" style="vertical-align:middle">Project Assumptions</label>
        <textarea cols="100" id="txtAssumption" name="txtAssumption" rows="5">@Model.dbview[0].assumption</textarea>
    </div>
    <div class="form-group">

        <label for="txtComments">Project Comments</label>
        <textarea cols="100" id="txtComments" name="txtComments" rows="5">@Model.dbview[0].comments</textarea>

    </div>
    <div class="form-group">
        <label style="vertical-align:middle">Status</label>
        @Html.DropDownListFor(model => model.project.statusId, new SelectList(Model.statusList, "statusId", "statusName"))
    </div>
    <div class="form-group">
        <label for="txtGateRecNo">Gate Record No</label>
        <input type="text" class="form-control" id="txtGateRecNo" value=@Model.dbview[0].gvId>
    </div>
    <div class="form-group">
        <label style="vertical-align:middle">Available Gates</label>
        @Html.DropDownListFor(model => model.gateversion.gvGateId, new SelectList(Model.gateList, "gateId", "gateDesc"))
    </div>
    <div class="form-group">
        <label for="txtgvAssumption" style="vertical-align:middle">Gate Assumptions</label>
        <textarea cols="100" id="txtgvAssumption" name="txtgvAssumption" rows="5">@Model.dbview[0].gvAssumption</textarea>
    </div>
    <div class="form-group">

        <label for="txtgvComments">Gate Comments</label>
        <textarea cols="100" id="txtgvComments" name="txtgvComments" rows="5">@Model.dbview[0].gvComments</textarea>

    </div>
    <div class="form-group">
        <label>Gate Status</label>
        @Html.DropDownListFor(model => model.gateversion.gvStatus, new List<SelectListItem>
         {
                     new SelectListItem {Text="Draft",Value="Draft"},
                     new SelectListItem {Text="Final",Value="Final"}
         })
        @*<select id="gvStatus">
                <option value="Draft">Draft</option>
                <option value="Final">Final</option>
            </select>*@
    </div>
</form>
<form>
    <table border="1">
        <tr>
            <td>
                <div style="text-align:right">
                    Select Existng Functionality
                    @Html.DropDownList("FunctionName", new SelectList(Model.functionList, "FuncId", "FuncName"), "Select")
                </div>
                <div style="text-align:left">
                    Functionality

                </div>

            </td>


            <td>Action</td>
        </tr>
        <tr>
            <td>
                <div>
                    <input type="text" id="txtFunc" size="300" />
                    <input type="text" id="txtFuncId" size="3" />
                    <input type="text" id="txtTotalDays" size="3" />
                </div>
            </td>
            <td>
                <button type="button" class="add-row" id="btnAddRow">Add Row</button>

            </td>
        </tr>
    </table>
</form>

<table id="tblGrid" border="1">
    <thead>
        <tr>
            <th>Function Id</th>
            <th>ProjFuncId</th>
            <th>Function Name</th>
            <th>Application</th>
            <th>Release</th>
            <th>Total Days</th>
            <th>JsonObject</th>
            <th>Action</th>
            <th>Action</th>
        </tr>
    </thead>
    <tbody>
        @foreach (var item in Model.groupFunction)
        {
            <tr class='gridRow'>

                <td><input type="text" id="fid" value="@item.FuncId" /></td>
                <td><input type="text" id="pfid" value="@item.ProjFuncId" /></td>
                <td>@item.FuncName</td>
                <td>@Html.DropDownListFor(model => item.appid, new SelectList(Model.appList, "appid", "appname", item.appid))</td>

                <td>@Html.DropDownListFor(model => item.releaseId, new SelectList(Model.relList, "releaseId", "releaseName", item.releaseId))</td>
                <td><span id='totaldays'>@item.totalDays</span></td>
                <td>
                    <input type="text" id='fjobj' value="@item.daysString" />
                    <input type="text" id='txtdayChange' value="@item.daysString" />
                </td>
                <td><button class='delete-row' name='btnDel'>Delete</button></td>
                <td><button class='modify-row' name='btnModify'>Modify</button></td>
            </tr>


        }

    </tbody>
</table>
<button id="btnSave">Save</button><label><span id="msg" style="font-family:Verdana;color:red"></span></label>

<textarea cols="199" id="txtObject" name="txtObject" rows="25" style="display:none"></textarea>
<input type="text" id="txtSingleJsonObj" style="display:none" />
<input type="text" id="txtDeleteRow" style="display:none" />
<div id="myModal" class="modal fade" data-backdrop="static" role="dialog">
    <div class="modal-dialog modal-lg">

        <!-- Modal content-->
        <div class="modal-content">
            <div class="modal-header">
                <button type="button" class="close" data-dismiss="modal">&times;</button>
                <h4 class="modal-title">Add Estimate</h4>
            </div>
            <div class="modal-body">
                <table border="1">
                    <tr>
                        <td>PhaseId</td>
                        @foreach (var x in Model.phaselist)
                        {
                            <td class="phaseClass">@x.phaseCode</td>
                        }

                    </tr>

                </table>
                <table border="1">

                    <tr>
                        <td>Role</td>

                        @foreach (var x in Model.phaselist)
                        {
                            <td>@x.phaseDesc</td>
                        }
                        <td>RoleId</td>

                    </tr>
                    @foreach (var y in Model.roleList)
                    {
                        <tr>
                            <td>
                                @y.roleName
                            </td>
                            @for (int x = 0; x < Model.phaselist.Count(); x++)
                            {
                                <td><input type="text" size="3" id="roleDays" class="daysClass" /><span id="estid" class="estclass"></span></td>
                            }
                            <td><input type="text" size="3" id="roleId" class="roleClass" value="@y.roleId" /></td>
                        </tr>

                    }
                </table>



            </div>
            <div class="modal-footer">

                <button type="button" class="btn btn-default" data-dismiss="modal" id="btnCanModal">Cancel</button>
                <button type="button" class="btn btn-primary" id="btnAddModal">Add</button>

            </div>

        </div>

    </div>
</div>
<script src="~/Scripts/jquery-3.4.1.min.js"></script>
<script src="~/Scripts/jquery.validate.min.js"></script>
<script src="~/Scripts/jquery.validate.unobtrusive.min.js"></script>


<script>
    $(document).ready(function () {
        var rowObject = new Object();

        $("#btnAddRow").click(function () {
            if ($("#txtFunc").val().length == 0) {

                alert("Please enter functionality");
                $("#txtFunc").focus();
                return;
            }

            var functionExist = "Off";
            $("#tblGrid").find('tr').each(function () {
                var currentRow = $(this).closest("tr");
                var col2 = currentRow.find("td:eq(1)").text();
                if ($("#txtFunc").val() == col2) {

                    alert("already use function")
                    functionExist = "On";
                    return;

                }
            });
            if (functionExist == "Off") {
                clearDays();
                $("#myModal").modal('show');
            }
        });

        $("#FuncId").change(function () {

            $("#txtFuncId").val($('#FuncId :selected').val());
            $("#txtFunc").val($('#FuncId :selected').text());

        });

        $("#btnCanModal").click(function () {

            $("#btnAddModal").html("Add");
           $("#myModal").modal('hide');
        });

        function clearDays() {

            $('.daysClass').each(function (i, e) {
                $(this).val("");
                $('.estclass').text("");
            })

        }

    $("#btnAddModal").click(function () {

            var totalDays = getTotalDays();

            if (totalDays == 0) {
                alert("Please enter days");
                return;
            } else {
                $("#txtTotalDays").val(totalDays);
            }



            var TotalPhase = $('.phaseClass').length;
            var TotalRole = $('.roleClass').length;
            var CounterPhase = 0;
        var CounterRole = 0;
        var CounterTxtDay = 0;
            var singleTextBoxRecord = "";
            var singleFuncEstimate = "";
            $('.daysClass').each(function (i, e) {

                if ($.isNumeric($(this).val())) {

                    if ($(this).val() > 0) {

                        var days = $(this).val();
                        var phaseId = $(".phaseClass").eq(CounterPhase).text();
                        var roleId = $(".roleClass").eq(CounterRole).val();
                        var estid = $(".estclass").eq(CounterTxtDay).text();
                        var flag = "E";
                        singleTextBoxRecord = estid+","+phaseId + "," + roleId + "," + days+","+flag;
                        if (singleFuncEstimate.length > 0) {
                            singleFuncEstimate = singleFuncEstimate + "-" + singleTextBoxRecord;
                        } else {

                            singleFuncEstimate = singleTextBoxRecord;
                        }
                    }
                }
                CounterPhase++;
                CounterTxtDay++;

                if (CounterPhase >= TotalPhase) {
                    CounterPhase = 0;

                    CounterRole++;
                }
                if (CounterRole >= TotalRole) {
                    CounterRole = 0;
                }
            });

            $("#txtSingleJsonObj").val(singleFuncEstimate);

             var appModel = '@Html.Raw(Json.Encode(Model.appList))';
            var appObj = JSON.parse(appModel)

            var relModel = '@Html.Raw(Json.Encode(Model.relList))';
            var relObj = JSON.parse(relModel)

            var appString = "";
            appString = "<select id='appdrop' name='appdrop'>";
            $.each(appObj, function (index, value) {
                appString = appString + "<option value=' " + value.appid + "'>" + value.appname + "</option>";

            });

            var relString = "";
            relString = "<select id='reldrop' name='reldrop'>";
            $.each(relObj, function (index, value) {
                relString = relString + "<option value=' " + value.releaseId + "'>" + value.releaseName + "</option>";

            });

            var dropdownfn = $('#FuncId :selected').text();

            var fname = $("#txtFunc").val();

            if (fname == dropdownfn) {

                fid = $("#txtFuncId").val();

            } else {

                fid = 0;

            }

        pfid = 0;

        var markup = "<tr class='gridRow'><td><input type='text' id='fid' value='" + fid + "'/></td >";
            markup = markup +"<td><input type='text' id='pfid' value="+pfid+"></td>";
            markup = markup +"<td>" + fname + "</td>";
            markup = markup + "<td>" + appString + "</td>";
            markup = markup + "<td>" + relString + "</td>";
        markup = markup + "<td><span id = 'totaldays' >" + totalDays + "</span></td>";

            markup = markup + "<td><input type='text' id='fjobj' value='" + $("#txtSingleJsonObj").val() + "'/></td>";
            markup = markup + "<td><button class='delete-row' name='btnDel'>Delete</button></td>";
            markup = markup + "<td><button class='modify-row' name='btnModify'>Modify</button></td><tr>";

            if ($("#btnAddModal").text() != "Update") {

                $("#tblGrid").append(markup);
            } else {

                rowObject.find("span:eq(0)").text(totalDays);
                rowObject.find("input:eq(2)").val(singleFuncEstimate);
                $("#btnAddModal").html("Add");
            }


            $("#myModal").modal('hide');
            $("#txtFuncId").val(0);
            $("#txtTotalDays").val(0);
            $("#txtSingleJsonObj").val("");
    });
        $("#tblGrid").on('click', '.delete-row', function () {
            var currentRow = $(this).closest("tr");

            var col2 = currentRow.find("input:eq(1)").val();   //project function id

            if (col2 > 0) {

                if ($.trim($("#txtDeleteRow").val()).length == 0) {

                    $("#txtDeleteRow").val(col2);

                } else {

                    $("#txtDeleteRow").val($("#txtDeleteRow").val() + "," + col2);

                }
            }



            $(this).parents("tr").remove();

        });

        $("#tblGrid").on('click', '.modify-row', function () {
            clearDays();

            $("#btnAddModal").html("Update");

            var currentRow = $(this).closest("tr");
            rowObject = currentRow;


            var col1 = currentRow.find("input:eq(0)").val();   //function id
            var col2 = currentRow.find("input:eq(1)").val();   //project function id
            var col3 = currentRow.find("td:eq(2)").text(); //function name
            var col4a = currentRow.find(":selected:eq(0)").val(); //application value
            var col4b = currentRow.find(":selected:eq(0)").text(); //application text
            var col5a = currentRow.find(":selected:eq(1)").val(); //release value
            var col5b = currentRow.find(":selected:eq(1)").text(); //release text
            var col7 = currentRow.find("input:eq(2)").val();   //json string

            //var col1 = currentRow.find("input:eq(0)").val();   //function id
            //var col2 = currentRow.find("td:eq(1)").text(); //function name
            //var col3a = currentRow.find(":selected:eq(0)").val(); //application value
            //var col3b = currentRow.find(":selected:eq(0)").text(); //application text
            //var col4a = currentRow.find(":selected:eq(1)").val(); //release value
            //var col4b = currentRow.find(":selected:eq(1)").text(); //release text
            //var col6 = currentRow.find("input:eq(1)").val();   //json string



            var arr = col7.split("-");


            var TotalPhase = $('.phaseClass').length;
            var TotalRole = $('.roleClass').length;
            var TotalEst = $('.estclass').length;


            var CounterPhase = 0;
            var CounterRole = 0;
            var counterdaytextbox = 0;
            for (i = 0; i < arr.length; i++) {
                counterdaytextbox = 0;
                var singleRecord = arr[i].split(",");

                estId = singleRecord[0];
                phase = singleRecord[1];
                role = singleRecord[2];
                day = singleRecord[3];
                flag = singleRecord[4];

                $('.daysClass').each(function (i, e) {


                    var phaseId = $(".phaseClass").eq(CounterPhase).text();
                    var roleId = $(".roleClass").eq(CounterRole).val()


                    if (phaseId == phase && roleId == role) {
                        $(this).val(day);
                        $(".estclass").eq(counterdaytextbox).text(estId);
                    }

                    CounterPhase++;


                    if (CounterPhase >= TotalPhase) {
                        CounterPhase = 0;

                        CounterRole++;
                    }
                    if (CounterRole >= TotalRole) {
                        CounterRole = 0;
                    }
                    counterdaytextbox++;
                });


            }

            $("#myModal").modal('show');

        });




        $("#btnSave").click(function () {
            var indicator = 0;
            $("#tblGrid").find('.gridRow').each(function () {

                var currentRow = $(this).closest("tr");
                var col1 = currentRow.find("input:eq(0)").val();
                indicator++;
            });
            if (indicator == 0) {
                alert("Please enter functionality");
                return false;
            }
            updateDaysString();

            var pfobj = "{";
            var strSingleEstimate = "";
            var strSingleFunctionEstimate = "";
            var strAllFunctionEstimate = "";

          //  pfobj = AssembleProjectGateVersion();

            $("#tblGrid").find('.gridRow').each(function () {

                var currentRow = $(this).closest("tr");


                var col1 = currentRow.find("input:eq(0)").val();   //function id
                var col2 = currentRow.find("input:eq(1)").val();   //project function id
                var col3 = currentRow.find("td:eq(2)").text(); //function name
                var col4a = currentRow.find(":selected:eq(0)").val(); //application value
                var col4b = currentRow.find(":selected:eq(0)").text(); //application text
                var col5a = currentRow.find(":selected:eq(1)").val(); //release value
                var col5b = currentRow.find(":selected:eq(1)").text(); //release text
                var col7 = currentRow.find("input:eq(2)").val();   //json string
                var col8 = currentRow.find("input:eq(3)").val();   //json string copy

                var arr = col7.split("-");

                for (i = 0; i < arr.length; i++) {

                    var singleRecord = arr[i].split(",");

                    estid = singleRecord[0];
                    phase = singleRecord[1];
                    role = singleRecord[2];
                    day = singleRecord[3];
                    flag = singleRecord[4];

                    if (estid.length == 0) {
                        estid = 0;
                    }


                    var gvid = $("#txtGateRecNo").val();

                    strSingleEstimate = CreateEstimateJsonObject(gvid, estid, phase, role, day, col1, col2, col3, col4a, col5a, flag);

                    if (strSingleFunctionEstimate.length > 0) {
                        strSingleFunctionEstimate = strSingleFunctionEstimate + "," + strSingleEstimate;
                    } else {

                        strSingleFunctionEstimate = strSingleEstimate;
                    }


                    // strSingleFunctionEstimate = "";
                }
                //if (col7 != col8) {                }

                if (strAllFunctionEstimate.length > 0) {
                    strAllFunctionEstimate = strAllFunctionEstimate + "," + strSingleFunctionEstimate;


                } else {

                    strAllFunctionEstimate = strSingleFunctionEstimate;
                }
                strSingleFunctionEstimate = "";
            });
            strAllFunctionEstimate = pfobj + addQuote("estimate", 1) + "[" + strAllFunctionEstimate + "]}";
            $("#txtObject").val(strAllFunctionEstimate);

            PostValues();
        });

        function updateDaysString() {
            $("#tblGrid").find('.gridRow').each(function () {

                var currentRow = $(this).closest("tr");
                var col7 = currentRow.find("input:eq(2)").val();   //json string
                var col8 = currentRow.find("input:eq(3)").val();   //json string copy
                if (col7 != col8) {

                    var textJson1 = convertToJson(col7);
                    var textJson2 = convertToJson(col8);

                    var obj1 = JSON.parse(textJson1);
                    var obj2 = JSON.parse(textJson2);

                    var FinalNewdt = CompareDataTableWithKeyValue(obj1, obj2);
                    var FinalOlddt = CompareDataTableWithKey(obj2, obj1);

                    var singleUpdatedJson = "";

                    $.each(FinalNewdt, function (i, obj) {

                        if (obj.flag == "E") {
                            //  alert(obj.key + " = " + obj.value + " = " + obj.flag);
                            if (singleUpdatedJson.length > 0) {

                                singleUpdatedJson = singleUpdatedJson + "-" + obj.value + "," + obj.flag;
                            }
                            else {
                                singleUpdatedJson = obj.value + "," + obj.flag;
                            }
                        }

                    });

                    $.each(FinalOlddt, function (i, obj) {
                        if (obj.flag == "D") {

                            if (singleUpdatedJson.length > 0) {

                                singleUpdatedJson = singleUpdatedJson + "-" + obj.value + "," + obj.flag;
                            }
                            else {
                                singleUpdatedJson = obj.value + "," + obj.flag;
                            }

                        }

                    });
                    // alert();
                    currentRow.find("input:eq(2)").val(singleUpdatedJson);
                }
                });


        }
        function CreateEstimateJsonObject(gvid,estid,phaseId, roleId, days, fid , pfid, fname, aid, rid,flag) {

            var mdate = new Date().getMonth() + 1 + "-" + new Date().getDate() + "-" + new Date().getFullYear();
            var str = "";
           // alert(new Date().getDay());

            str = "{" + addQuote("ProjFuncId", 1) + pfid+",";
            str = str + addQuote("GateversionId", 1) + gvid+",";
            str = str + addQuote("FuncId", 1) + fid + ",";
            str = str + addQuote("FuncName", 1) + addQuote(fname, 0) + ",";
            str = str + addQuote("AppId", 1) + aid + ",";
            str = str + addQuote("RelId", 1) + rid + ",";
            str = str + addQuote("estId", 1) + estid+",";
            str = str + addQuote("projectFunctionId", 1) + pfid+",";
            str = str + addQuote("estDays", 1) + days + ",";
            str = str + addQuote("phaseCode", 1) + phaseId + ",";
            str = str + addQuote("roleId", 1) + roleId + ",";
            str = str + addQuote("estimatedOn", 1) + addQuote(mdate, 0) + ",";
            str = str + addQuote("deletRows", 1) + addQuote($("#txtDeleteRow").val(), 0) + ",";
            str = str + addQuote("flag", 1) + addQuote(flag, 0) + ",";
            str = str + addQuote("userEstimate", 1) + addQuote("adeel", 0) + "}";

            return str;

        }


        function PostValues() {

            var model = JSON.parse($("#txtObject").val());

            $.ajax
                (
                    {
                        type: "POST",
                        url: "/Project/Edit",
                        data: JSON.stringify(model),
                        contentType: "application/json; charset=utf-8",
                        dataType: "Json",
                        success: function (response) {
                            $("#msg").text(response);
                            $("#msg").css({ 'color': 'Green' });

                            // top.location.href = '/Home/Index';
                        },
                        failure: function (response) {
                            $("#msg").text(response);

                        },
                        error: function (xhr) {

                           $("#msg").text(xhr.status + " , "+  xhr.statusText);

                        }
                    }
                ); // ajax


        }
        function addQuote(fieldname, indicator) {
            if (indicator == 1) {
                return "\"" + fieldname + "\":";
            } else {
                return "\"" + fieldname + "\"";
            }
        }
        function getTotalDays() {

            var day = 0;
            $('.daysClass').each(function () {

                if ($.isNumeric($(this).val())) {

                    if ($(this).val() > 0) {
                        day = day + parseFloat($(this).val());
                    }
                }

            });

            return day;
        }

        function convertToJson(str) {

            var allrecord = "";
            var arr = str.split("-");

            //"93,4,1,1,X;=>convert 93,4,1,1?X
            for (var i = 0; i < arr.length; i++) {

                var n = arr[i].lastIndexOf(",");

                var strx = arr[i].substring(0, n) + "?" + arr[i].substring(n + 1); //just to ignore last comma,replace last coma with ?
            //    alert(str);
                var n = strx.lastIndexOf(",");

                var key = strx.substring(0, n);

                var n = strx.lastIndexOf("?");

                var value = strx.substring(0,n);

                var sr = "{" + addQuote("key", 1) + addQuote(key, 0) + "," + addQuote("value", 1) + addQuote(value, 0) + "," + addQuote("flag", 1) + addQuote("X") + "}";
               // alert(sr)
                if (allrecord.length > 0) {
                    allrecord = allrecord + "," + sr;
                } else {
                    allrecord = sr;
                }

            }
            allrecord = "[" + allrecord + "]";

            return allrecord;
        }
        function CompareDataTableWithKey(obj1, obj2) {

            var findFlag = 0;

            $.each(obj1, function (i, obj1) {
                var Nkey = obj1.key;
                var Nvalue = obj1.value;

                findFlag = 0;
                $.each(obj2, function (i, obj2) {
                    var Okey = obj2.key;
                    var Ovalue = obj2.value;

                    if (Nkey == Okey) {

                        findFlag = 1;
                    }
                });

                if (findFlag == 0) {
                    obj1.flag = "D";
                }

            });
            return obj1;

        }
        function CompareDataTableWithKeyValue(obj1, obj2) {

            var findFlag = 0;

            $.each(obj1, function (i, obj1) {
                var Nkey = obj1.key;
                var Nvalue = obj1.value;
                //  alert(Nkey + " = " + Nvalue);
                findFlag = 0;
                $.each(obj2, function (i, obj2) {
                    var Okey = obj2.key;
                    var Ovalue = obj2.value;

                    if (Nkey == Okey) {
                        if (Nvalue != Ovalue) {
                            obj1.flag = "E";

                        }
                        findFlag = 1;
                    }
                });

                if (findFlag == 0) {
                    obj1.flag = "E";
                }

            });
            return obj1;
        }

    });
</script>