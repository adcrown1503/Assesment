@model Assesment.Models.WrapperViewNewProject
<br />
<br />


@*<div class="form-group">
        <label for="txtProjectId">Project Id</label>
        <input type="text" class="form-control" id="txtProjectId" value="0">
    </div>*@


<div id="MainDiv">
    <div class="row">

        <div class="col-sm-3">
            <label for="txtProjectName">Project Name</label>
            <input type="text" class="form-control" id="txtProjectName">
        </div>
        <div class="col-sm-3">
            @*<div class="input-group date" id="txtAssesmentDate">
                    <input type="text" class="form-control" name="txtAssesmentDate" />
                    <span class="input-group-addon"><span class="glyphicon glyphicon-calendar"></span></span>
                </div>*@
            <label for="txtAssesmentDate">Assesment Date</label>
            <input type="text" class="datepicker form-control" id="txtAssesmentDate" autocomplete="off">
        </div>
        <div class="col-sm-3">
            <label for="txtDesiredDate">Desired Release Date</label>
            <input type="text" class="datepicker form-control" id="txtDesiredDate" autocomplete="off">
        </div>
    </div>
    <br />
    <br />
    <div class="row">

        <div class="col-sm-3">
            <label for="txtAssumption">Project Assumptions</label>
            <textarea cols="100" id="txtAssumption" name="txtAssumption" rows="5" class="form-control"></textarea>
        </div>
        <div class="col-sm-3">

            <label for="txtComments">Project Comments</label>
            <textarea cols="100" id="txtComments" name="txtComments" rows="5" class="form-control"></textarea>

        </div>

    </div>

    <br />
    <br />

    <div class="row">

        <div class="col-sm-3">
            <label>Impact Type</label>

            <select id="txtImpactType" class="form-control">
                <option Selected>None</option>
                <option value="Small">Small</option>
                <option value="Medium">Medium</option>
                <option value="Large">Large</option>
                <option value="Very Large">Very Large</option>
            </select>
        </div>
        <div class="col-sm-3">
            <label style="vertical-align:middle">Status</label>
            @Html.DropDownList("statusId", new SelectList(Model.statusList, "statusId", "statusName"), new { @class = "form-control" })
            @*model => model.projectStatus.statusId*@
        </div>
    </div>
    <br />
    <button class="btn-primary" id="btnNext1">Next</button>
</div>
<br />

<div id="GateDiv" style="display:none">
    <div class="row">
        <div class="col-sm-12">
            <label style="vertical-align:middle">Available Gates</label>
            @Html.DropDownList("gateId", new SelectList(Model.gateList, "gateId", "gateDesc"), new { @class = "form-control" })
            @*model => model.gate.gateId*@
        </div>

    </div>
    <br />
    <button class="btn-primary" id="btnBack">Back</button>
    <button class="btn-primary" id="btnNext2">Next</button>
</div>

@*<div class="form-group">
        <label for="txtGateRecNo">Gate Record No</label>
        <input type="text" class="form-control" id="txtGateRecNo" value="0">
    </div>*@
<div id="FuncDiv" style="display:none">
    <div class="row">

        <div class="col-sm-3">
            <label for="txtgvAssumption" style="vertical-align:middle">Gate Assumptions</label>
            <textarea cols="100" id="txtgvAssumption" name="txtgvAssumption" rows="5" class="form-control"></textarea>
        </div>
        <div class="col-sm-3">

            <label for="txtgvComments">Gate Comments</label>
            <textarea cols="100" id="txtgvComments" name="txtgvComments" rows="5" class="form-control"></textarea>

        </div>
    </div>
    <br />
    <div class="row">
        <div class="col-sm-3">
            <label>Gate Status</label>

            <select id="txtGateStatus" class="form-control">
                <option value="Draft">Draft</option>
                <option value="Final">Final</option>
            </select>
        </div>

    </div>
    <br />
    <div class="row">
        <div class="col-sm-12">
            <table class="table table-sm">
                <tr>
                    <td>
                        <label>Select Existng Functionality</label>
                    <td>
                    <td>
                        @Html.DropDownList("FuncId", new SelectList(Model.functionList, "FuncId", "FuncName"), "Select", new { @class = "form-control" })
                        @*model => model.functionality.FuncId*@
                    </td>
                    @{ for (int i = 0; i < 8; i++)
                        {

                            <td></td>

                        };}
                    <td>
                        <button type="button" class="btn btn-primary btn-sm" id="btnAddRow">Add Row</button>

                    </td>
                </tr>

            </table>

        </div>

        <div>
            <input type="text" id="txtFunc" size="300" style="display:none" />
            <input type="text" id="txtFuncId" size="3" style="display:none" />
            <input type="text" id="txtTotalDays" size="3" style="display:none" />
        </div>

    </div>




    <table id="tblGrid" class="table table-sm">
        <thead>
            <tr style="background-color:#00FF00">
                <th style="display:none">Function Id</th>
                <th>Function Name</th>
                <th>Application</th>
                <th>Release</th>
                <th>Total Days</th>
                <th style="display:none">JsonObject</th>
                <th colspan="2">Action</th>

            </tr>
        </thead>
        <tbody>
            @*<tr>
                    <td>Peter Parker</td>
                    <td>peterparker@mail.com</td>
                    <td><input type="button" value="Delete" name="record"></td>
                </tr>*@
        </tbody>
    </table>
    <button id="btnSave" class="btn btn-primary btn-sm">Save</button>


    <input type="text" id="txtSingleJsonObj" style="display:none" />


</div>
<form id="MainForm" name="MainForm" method="Post" action="Add">

    <textarea cols="199" id="txtObject" name="txtObject" rows="25" style="display:none"></textarea>

</form>
<div id="myModal" class="modal fade" data-backdrop="static" role="dialog">
    <div class="modal-dialog modal-lg">

        <!-- Modal content-->
        <div class="modal-content">
            <div class="modal-header">
                <button type="button" class="close" data-dismiss="modal">&times;</button>

                <h4 class="modal-title">Add Estimate for </h4><span id="txtSelectedFunction" style="color:red "></span>
            </div>
            <div class="modal-body">
                <table class="table-bordered" style="display:none">
                    <tr>
                        <td>PhaseId</td>
                        @foreach (var x in Model.phaselist)
                        {
                            <td class="phaseClass">@x.phaseCode</td>
                        }

                    </tr>

                </table>
                <table class="table" border="1">

                    <tr>
                        <td style="background-color:cadetblue">Role</td>

                        @foreach (var x in Model.phaselist)
                        {
                            <td align="center" style="background-color:cadetblue">@x.phaseDesc</td>
                        }
                        <td style="display:none">RoleId</td>

                    </tr>
                    @foreach (var y in Model.roleList)
                    {
                        <tr>
                            <td style="background-color:cadetblue">
                                @y.roleName
                            </td>
                            @for (int x = 0; x < Model.phaselist.Count(); x++)
                            {
                                <td align="center"><input type="text" size="3" id="roleDays" class="daysClass" /></td>
                            }
                            <td style="display:none"><input type="text" size="3" id="roleId" class="roleClass" value="@y.roleId" /></td>
                        </tr>

                    }
                </table>



            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-primary btn-sm" data-dismiss="modal" id="btnCanModal">Cancel</button>
                <button type="button" class="btn btn-primary btn-sm" id="btnAddModal">Add</button>
                @*<button type="button" class="btn btn-primary" id="btnUpdateModal">Update</button>*@
            </div>

        </div>

    </div>
</div>

@*<script src="~/Scripts/jquery.validate.min.js"></script>
    <script src="~/Scripts/jquery.validate.unobtrusive.min.js"></script>*@
@*<script src="~/Scripts/Project.js"></script>*@
<link href="~/Content/themes/base/datepicker.css" rel="stylesheet" />
<link href="~/Content/themes/base/jquery-ui.css" rel="stylesheet" />
<script src="~/Scripts/jquery-3.4.1.min.js"></script>
<script src="~/Scripts/jquery-ui-1.12.1.min.js"></script>
<script>
    $(document).ready(function () {
        var rowOject = new Object();
        debugger
        $("#txtProjectName").focus();

        $(".datepicker").datepicker({
            dateFormat: "dd/mm/yy"
        });

        $("#btnNext1").click(function () {

            if ($("#txtProjectName").val() == "") {

                $('#txtProjectName').css('border-color', 'red');
                $("#txtProjectName").attr("placeholder", "Project Name").val("").focus().blur();
                return false;
            }
            if ($("#txtAssesmentDate").val() == "") {

                $('#txtAssesmentDate').css('border-color', 'red');
                $("#txtAssesmentDate").attr("placeholder", "Date Required").val("").focus().blur();
                return false;
            }
            if ($("#txtDesiredDate").val() == "") {

                $('#txtDesiredDate').css('border-color', 'red');
                $("#txtDesiredDate").attr("placeholder", "Date Required").val("").focus().blur();
                return false;
            }
            if ($("#txtAssumption").val() == "") {

                $('#txtAssumption').css('border-color', 'red');
                $("#txtAssumption").attr("placeholder", "Project Assumption").val("").focus().blur();
                return false;
            }
            if ($("#txtComments").val() == "") {

                $('#txtComments').css('border-color', 'red');
                $("#txtComments").attr("placeholder", "Project Comments").val("").focus().blur();
                return false;
            }
            $("#MainDiv").hide();
            $("#GateDiv").show();

        });
        $("#btnBack").click(function () {
            $("#MainDiv").show();
            $("#GateDiv").hide();

        });
        $("#btnNext2").click(function () {
            $("#GateDiv").hide();
            $("#FuncDiv").show();

        });
        $("#btnSave").click(function () {
            debugger
            var indicator = 0;
            $("#tblGrid").find('.gridRow').each(function () {

                var currentRow = $(this).closest("tr");
                var col1 = currentRow.find("input:eq(0)").val();
                indicator++;
            });
            if (indicator == 0) {
                alert("Please enter functionality");
                return false;
            }
            var pfobj = "";
            var strSingleEstimate = "";
            var strSingleFunctionEstimate = "";
            var strAllFunctionEstimate = "";

            pfobj = AssembleProjectGateVersion();

            $("#tblGrid").find('.gridRow').each(function () {

                var currentRow = $(this).closest("tr");


                var col1 = currentRow.find("input:eq(0)").val();   //function id
                var col2 = currentRow.find("td:eq(1)").text(); //function name
                var col3a = currentRow.find(":selected:eq(0)").val(); //application value
                var col3b = currentRow.find(":selected:eq(0)").text(); //application text
                var col4a = currentRow.find(":selected:eq(1)").val(); //release value
                var col4b = currentRow.find(":selected:eq(1)").text(); //release text
                var col6 = currentRow.find("input:eq(1)").val();   //json string

                var arr = col6.split("-");

                for (i = 0; i < arr.length; i++) {

                    var singleRecord = arr[i].split(",");


                    phase = singleRecord[0];
                    role = singleRecord[1];
                    day = singleRecord[2];

                    debugger

                    strSingleEstimate = CreateEstimateJsonObject(phase, role, day, col1, col2, col3a, col4a);

                    if (strSingleFunctionEstimate.length > 0) {
                        strSingleFunctionEstimate = strSingleFunctionEstimate + "," + strSingleEstimate;
                    } else {

                        strSingleFunctionEstimate =  strSingleEstimate;
                    }


                   // strSingleFunctionEstimate = "";
                }
                if (strAllFunctionEstimate.length > 0) {
                    strAllFunctionEstimate = strAllFunctionEstimate + "," + strSingleFunctionEstimate;


                } else {

                    strAllFunctionEstimate = strSingleFunctionEstimate;
                }
                strSingleFunctionEstimate = "";
            });
            strAllFunctionEstimate = pfobj+addQuote("estimate",1)+"["+strAllFunctionEstimate + "]}";
            $("#txtObject").val(strAllFunctionEstimate);
            debugger
          //  var model = JSON.stringify(strAllFunctionEstimate)
          //  var model = JSON.parse(strAllFunctionEstimate);
           // $("#txtObject").val(model);
            $("#MainForm").submit();
          //  PostValues();

        });

        $("#FuncId").change(function () {

            $("#txtFuncId").val($('#FuncId :selected').val());
            $("#txtFunc").val($('#FuncId :selected').text());

        });
        //
        $("#btnAddRow").click(function () {
            if ($("#txtFunc").val().length == 0) {

                alert("Please enter functionality");
                $("#txtFunc").focus();
                return;
            }
            debugger
            var functionExist = "Off";
            $("#tblGrid").find('tr').each(function () {
                var currentRow = $(this).closest("tr");
                var col2 = currentRow.find("td:eq(1)").text();
                if ($("#txtFunc").val() == col2) {

                    alert("already use function")
                    functionExist = "On";
                    return;

                }
            });
            if (functionExist == "Off"){
                clearDays();
                $("#txtSelectedFunction").text($("#txtFunc").val());
                     $("#myModal").modal('show');
            }

        });

        $("#btnCanModal").click(function () {

            $("#btnAddModal").html("Add");
            $("#myModal").modal('hide');
        });


           $("#btnAddModal").click(function () {

            var totalDays = getTotalDays();

            if (totalDays == 0) {
                alert("Please enter days");
                return;
            } else {
                $("#txtTotalDays").val(totalDays);
            }



            var TotalPhase = $('.phaseClass').length;
            var TotalRole = $('.roleClass').length;
            var CounterPhase = 0;
            var CounterRole = 0;
            var singleTextBoxRecord = "";
            var singleFuncEstimate = "";
            $('.daysClass').each(function (i, e) {

                if ($.isNumeric($(this).val())) {

                    if ($(this).val() > 0) {

                        var days = $(this).val();
                        var phaseId = $(".phaseClass").eq(CounterPhase).text();
                        var roleId = $(".roleClass").eq(CounterRole).val()

                        singleTextBoxRecord = phaseId + "," + roleId + "," + days;
                        if (singleFuncEstimate.length > 0) {
                            singleFuncEstimate = singleFuncEstimate + "-" + singleTextBoxRecord;
                        } else {

                            singleFuncEstimate = singleTextBoxRecord;
                        }
                    }
                }
                CounterPhase++;


                if (CounterPhase >= TotalPhase) {
                    CounterPhase = 0;

                    CounterRole++;
                }
                if (CounterRole >= TotalRole) {
                    CounterRole = 0;
                }
            });

            $("#txtSingleJsonObj").val(singleFuncEstimate);

             var appModel = '@Html.Raw(Json.Encode(Model.appList))';
            var appObj = JSON.parse(appModel)

            var relModel = '@Html.Raw(Json.Encode(Model.relList))';
            var relObj = JSON.parse(relModel)

            var appString = "";
            appString = "<select id='appdrop' name='appdrop'>";
            $.each(appObj, function (index, value) {
                appString = appString + "<option value=' " + value.appid + "'>" + value.appname + "</option>";

            });

            var relString = "";
            relString = "<select id='reldrop' name='reldrop'>";
            $.each(relObj, function (index, value) {
                relString = relString + "<option value=' " + value.releaseId + "'>" + value.releaseName + "</option>";

            });

            var dropdownfn = $('#FuncId :selected').text();

            var fname = $("#txtFunc").val();

            if (fname == dropdownfn) {

                fid = $("#txtFuncId").val();

            } else {

                fid = 0;
            }



            var markup = "<tr class='gridRow'><td style='display:none'><input type='text' id='fid' value='" + fid + "'/></td><td>" + fname + "</td>";
            markup = markup + "<td>" + appString + "</td>";
            markup = markup + "<td>" + relString + "</td>";
            markup = markup + "<td><span id = 'totaldays' >" + totalDays + "</span></td>";
        markup = markup + "<td style='display:none'><input type='text' id='fjobj' value='" + $("#txtSingleJsonObj").val() + "'/></td>";
        markup = markup + "<td><button class='btn btn-primary btn-sm delete-row' name='btnDel'>Delete</button></td>";
        markup = markup + "<td><button class='btn btn-primary btn-sm modify-row' name='btnModify'>Modify</button></td><tr>";

            if ($("#btnAddModal").text() != "Update") {

                $("#tblGrid").append(markup);
            } else {

                rowOject.find("span:eq(0)").text(totalDays);
                rowOject.find("input:eq(1)").val(singleFuncEstimate);
                $("#btnAddModal").html("Add");
            }


            $("#myModal").modal('hide');
            $("#txtFuncId").val(0);
          $("#txtTotalDays").val(0);
          $("#txtFunc").val("");
            $("#txtSingleJsonObj").val("");
        });


        function getTotalDays() {

            var day = 0;
            $('.daysClass').each(function () {

                if ($.isNumeric($(this).val())) {

                    if ($(this).val() > 0) {
                        day = day + parseFloat($(this).val());
                    }
                }

            });

            return day;
        }


        $("#tblGrid").on('click', '.modify-row', function () {
            clearDays();

            $("#btnAddModal").html("Update");

            var currentRow = $(this).closest("tr");
            rowOject = currentRow;

            var col1 = currentRow.find("input:eq(0)").val();   //function id
            var col2 = currentRow.find("td:eq(1)").text(); //function name
            var col3a = currentRow.find(":selected:eq(0)").val(); //application value
            var col3b = currentRow.find(":selected:eq(0)").text(); //application text
            var col4a = currentRow.find(":selected:eq(1)").val(); //release value
            var col4b = currentRow.find(":selected:eq(1)").text(); //release text
            var col6 = currentRow.find("input:eq(1)").val();   //json string


            var arr = col6.split("-");

            debugger
            var TotalPhase = $('.phaseClass').length;
            var TotalRole = $('.roleClass').length;
            var CounterPhase = 0;
            var CounterRole = 0;
            for (i = 0; i < arr.length; i++) {

                var singleRecord = arr[i].split(",");


                phase = singleRecord[0];
                role = singleRecord[1];
                day = singleRecord[2];

                $('.daysClass').each(function (i, e) {


                    var phaseId = $(".phaseClass").eq(CounterPhase).text();
                    var roleId = $(".roleClass").eq(CounterRole).val()

                    if (phaseId == phase && roleId == role) {
                        $(this).val(day);
                    }

                    CounterPhase++;


                    if (CounterPhase >= TotalPhase) {
                        CounterPhase = 0;

                        CounterRole++;
                    }
                    if (CounterRole >= TotalRole) {
                        CounterRole = 0;
                    }
                });


            }
            $("#txtSelectedFunction").text(col2);
            $("#myModal").modal('show');

        });


        $("#tblGrid").on('click', '.delete-row', function () {

            $(this).parents("tr").remove();

        });

        function clearDays() {

            $('.daysClass').each(function (i, e) {
                $(this).val("");
            })

        }



        function AssembleProjectGateVersion() {


            var projectStr = "{\"project\":{";

            projectStr = projectStr + addQuote("id", 1) + "0,";
            projectStr = projectStr + addQuote("name", 1) + addQuote($("#txtProjectName").val(), 0) + ",";
            projectStr = projectStr + addQuote("assesmentDate", 1) + addQuote($("#txtAssesmentDate").val(), 0) + ",";
            projectStr = projectStr + addQuote("desiredReleaseDate", 1) + addQuote($("#txtDesiredDate").val(), 0) + ",";
            projectStr = projectStr + addQuote("impactType", 1) + addQuote($("#txtImpactType").val(), 0) + ",";
            projectStr = projectStr + addQuote("assumption", 1) + addQuote($("#txtAssumption").val(), 0) + ",";
            projectStr = projectStr + addQuote("comments", 1) + addQuote($("#txtComments").val(), 0) + ",";
            projectStr = projectStr + addQuote("statusId", 1) + $("#statusId").val();
            projectStr = projectStr + "},";

            projectStr = projectStr + addQuote("gateVersion", 1) + "{";
            projectStr = projectStr + addQuote("gvId", 1) + "0,";
            projectStr = projectStr + addQuote("gvProjectId", 1) + "0,";
            projectStr = projectStr + addQuote("gvGateId", 1) + $("#gateId").val() + ",";
            projectStr = projectStr + addQuote("gvLine", 1) + "1,";
            projectStr = projectStr + addQuote("gvComments", 1) + addQuote($("#txtgvComments").val(), 0) + ",";
            projectStr = projectStr + addQuote("gvAssumption", 1) + addQuote($("#txtgvAssumption").val(), 0) + ",";
            projectStr = projectStr + addQuote("gvStatus", 1) + addQuote($("#txtGateStatus").val(), 0) + "},";


            return projectStr;
        }


        function CreateEstimateJsonObject(phaseId, roleId, days, fid, fname, aid, rid) {

            var mdate = new Date().getMonth() + 1 + "-" + new Date().getDay() + "-" + new Date().getFullYear();
            var str = "";


            str = "{" + addQuote("ProjFuncId", 1) + "0,";
            str = str + addQuote("GateversionId", 1) + " 0,";
            str = str + addQuote("FuncId", 1) + fid + ",";
            str = str + addQuote("FuncName", 1) + addQuote(fname, 0) + ",";
            str = str + addQuote("AppId", 1) + aid + ",";
            str = str + addQuote("RelId", 1) + rid + ",";
            str = str + addQuote("estId", 1) + "0,";
            str = str + addQuote("projectFunctioId", 1) + "0,";
            str = str + addQuote("estDays", 1) + days + ",";
            str = str + addQuote("phaseCode", 1) + phaseId + ",";
            str = str + addQuote("roleId", 1) + roleId + ",";
            str = str + addQuote("estimatedOn", 1) + addQuote(mdate, 0) + ",";
            str = str + addQuote("userEstimate", 1) + addQuote("adeel", 0) + "}";

            return str;

        }

        function addQuote(fieldname, indicator) {
            if (indicator == 1) {
                return "\"" + fieldname + "\":";
            } else {
                return "\"" + fieldname + "\"";
            }
        }
        function PostValues() {

            var model = JSON.parse($("#txtObject").val());

            $.ajax
                (
                    {
                        type: "POST",
                        url: "/Project/Add",
                        data: JSON.stringify(model),
                        contentType: "application/json; charset=utf-8",
                        dataType: "Json",
                        success: function (response) {
                            alert("success");
                            alert(response);
                            // top.location.href = '/Home/Index';
                        },
                        failure: function (response) {
                            alert("failure");
                            alert(response);
                        },
                        error: function (response) {
                            alert("error");
                            alert(response);
                        }
                    }
                ); // ajax


        }


    });







</script>
